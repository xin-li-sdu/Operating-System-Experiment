


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           Generic ARM 
                       Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.86
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;
   14 00000000         ; For       : ARMv7M Cortex-M3
   15 00000000         ; Mode      : Thumb2
   16 00000000         ; Toolchain : RealView Development Suite
   17 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   18 00000000         ;             ARM Developer Suite (ADS)
   19 00000000         ;             Keil uVision
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         ;                                           PUBLIC FUNCT
                       IONS
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         
   26 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   27 00000000                 EXTERN           OSPrioCur
   28 00000000                 EXTERN           OSPrioHighRdy
   29 00000000                 EXTERN           OSTCBCur
   30 00000000                 EXTERN           OSTCBHighRdy
   31 00000000                 EXTERN           OSIntNesting
   32 00000000                 EXTERN           OSIntExit
   33 00000000                 EXTERN           OSTaskSwHook
   34 00000000         
   35 00000000         
   36 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   37 00000000                 EXPORT           OS_CPU_SR_Restore
   38 00000000                 EXPORT           OSStartHighRdy
   39 00000000                 EXPORT           OSCtxSw
   40 00000000                 EXPORT           OSIntCtxSw
   41 00000000                 EXPORT           OS_CPU_PendSVHandler
   42 00000000         
   43 00000000         
   44 00000000         ;*******************************************************
                       *************************************************
   45 00000000         ;                                                EQUATES



ARM Macro Assembler    Page 2 


                       
   46 00000000         ;*******************************************************
                       *************************************************
   47 00000000         
   48 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   49 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   50 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   51 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   52 00000000         
   53 00000000         ;*******************************************************
                       *************************************************
   54 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   55 00000000         ;*******************************************************
                       *************************************************
   56 00000000         
   57 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   58 00000000                 THUMB
   59 00000000                 REQUIRE8
   60 00000000                 PRESERVE8
   61 00000000         
   62 00000000         ;*******************************************************
                       *************************************************
   63 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   64 00000000         ;
   65 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   66 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   67 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   68 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   69 00000000         ;              into the CPU's status register.
   70 00000000         ;
   71 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   72 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   73 00000000         ;
   74 00000000         ;
   75 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   76 00000000         ;
   77 00000000         ;                 void Task (void *p_arg)



ARM Macro Assembler    Page 3 


   78 00000000         ;                 {
   79 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   80 00000000         ;                     OS_CPU_SR  cpu_sr;
   81 00000000         ;                 #endif
   82 00000000         ;
   83 00000000         ;                          :
   84 00000000         ;                          :
   85 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   86 00000000         ;                          :
   87 00000000         ;                          :
   88 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   89 00000000         ;                          :
   90 00000000         ;                          :
   91 00000000         ;                 }
   92 00000000         ;*******************************************************
                       *************************************************
   93 00000000         
   94 00000000         OS_CPU_SR_Save
   95 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   96 00000004 B672            CPSID            I
   97 00000006 4770            BX               LR
   98 00000008         
   99 00000008         OS_CPU_SR_Restore
  100 00000008 F380 8810       MSR              PRIMASK, R0
  101 0000000C 4770            BX               LR
  102 0000000E         
  103 0000000E         ;*******************************************************
                       *************************************************
  104 0000000E         ;                                          START MULTITA
                       SKING
  105 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  106 0000000E         ;
  107 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  108 0000000E         ;              the first task to start.
  109 0000000E         ;
  110 0000000E         ;           2) OSStartHighRdy() MUST:
  111 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  112 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  113 0000000E         ;              c) Set OSRunning to TRUE;
  114 0000000E         ;              d) Trigger PendSV exception;
  115 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  116 0000000E         ;*******************************************************
                       *************************************************
  117 0000000E         
  118 0000000E         OSStartHighRdy
  119 0000000E B672            CPSID            I
  120 00000010 481E            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity



ARM Macro Assembler    Page 4 


  121 00000012 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  122 00000016 7001            STRB             R1, [R0]
  123 00000018         
  124 00000018 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  125 0000001A F380 8809       MSR              PSP, R0
  126 0000001E         
  127 0000001E 481C            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  128 00000020 2101            MOVS             R1, #1
  129 00000022 7001            STRB             R1, [R0]
  130 00000024         
  131 00000024 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  132 00000026 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  133 0000002A 6001            STR              R1, [R0]
  134 0000002C B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  135 0000002E 4770            BX               LR
  136 00000030         
  137 00000030         OSStartHang
  138 00000030 E7FE            B                OSStartHang ; Should never get 
                                                            here
  139 00000032         
  140 00000032         
  141 00000032         ;*******************************************************
                       *************************************************
  142 00000032         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  143 00000032         ;                                           void OSCtxSw
                       (void)
  144 00000032         ;
  145 00000032         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  146 00000032         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  147 00000032         ;*******************************************************
                       *************************************************
  148 00000032         
  149 00000032         OSCtxSw
  150 00000032 B672            CPSID            I
  151 00000034 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  152 00000036 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  153 0000003A 6001            STR              R1, [R0]
  154 0000003C B662            CPSIE            I
  155 0000003E 4770            BX               LR
  156 00000040         
  157 00000040         
  158 00000040         ;*******************************************************
                       *************************************************
  159 00000040         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)



ARM Macro Assembler    Page 5 


  160 00000040         ;                                         void OSIntCtxS
                       w(void)
  161 00000040         ;
  162 00000040         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  163 00000040         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  164 00000040         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  165 00000040         ;*******************************************************
                       *************************************************
  166 00000040         
  167 00000040         OSIntCtxSw
  168 00000040 4814            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  169 00000042 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  170 00000046 6001            STR              R1, [R0]
  171 00000048 4770            BX               LR
  172 0000004A         
  173 0000004A         ;*******************************************************
                       *************************************************
  174 0000004A         ;                                         HANDLE PendSV 
                       EXCEPTION
  175 0000004A         ;                                     void OS_CPU_PendSV
                       Handler(void)
  176 0000004A         ;
  177 0000004A         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  178 0000004A         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  179 0000004A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  180 0000004A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  181 0000004A         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  182 0000004A         ;              a thread or occurs due to an interrupt or
                        exception.
  183 0000004A         ;
  184 0000004A         ;           2) Pseudo-code is:
  185 0000004A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  186 0000004A         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  187 0000004A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  188 0000004A         ;              d) Call OSTaskSwHook();
  189 0000004A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  190 0000004A         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  191 0000004A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  192 0000004A         ;              h) Restore R4-R11 from new process stack;
                       
  193 0000004A         ;              i) Perform exception return which will re
                       store remaining context.



ARM Macro Assembler    Page 6 


  194 0000004A         ;
  195 0000004A         ;           3) On entry into PendSV handler:
  196 0000004A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  197 0000004A         ;                 xPSR, PC, LR, R12, R0-R3
  198 0000004A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  199 0000004A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  200 0000004A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  201 0000004A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  202 0000004A         ;
  203 0000004A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  204 0000004A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  205 0000004A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  206 0000004A         ;*******************************************************
                       *************************************************
  207 0000004A         
  208 0000004A         OS_CPU_PendSVHandler
  209 0000004A B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  210 0000004C F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  211 00000050 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  212 00000052         
  213 00000052 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  214 00000054 E880 0FF0       STM              R0, {R4-R11}
  215 00000058         
  216 00000058 490F            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  217 0000005A 6809            LDR              R1, [R1]
  218 0000005C 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  219 0000005E         
  220 0000005E         ; At this point, entire context of process has been save
                       d
  221 0000005E         OS_CPU_PendSVHandler_nosave
  222 0000005E B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  223 00000060 480E            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  224 00000062 4780            BLX              R0
  225 00000064 F85D EB04       POP              {R14}
  226 00000068         
  227 00000068 480D            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  228 0000006A 490E            LDR              R1, =OSPrioHighRdy



ARM Macro Assembler    Page 7 


  229 0000006C 780A            LDRB             R2, [R1]
  230 0000006E 7002            STRB             R2, [R0]
  231 00000070         
  232 00000070 4809            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  233 00000072 490D            LDR              R1, =OSTCBHighRdy
  234 00000074 680A            LDR              R2, [R1]
  235 00000076 6002            STR              R2, [R0]
  236 00000078         
  237 00000078 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  238 0000007A E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  239 0000007E 3020            ADDS             R0, R0, #0x20
  240 00000080 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  241 00000084 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  242 00000088 B662            CPSIE            I
  243 0000008A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context 
  244 0000008C                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\output\os_cpu_a.d -o.\output\os_cpu_a.o -IF:\keli5\ARM\RV31\INC 
-IF:\keli5\ARM\CMSIS\Include -IF:\keli5\ARM\INC\ST\STM32F10x --predefine="__EVA
L SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 5
36" --list=.\list\os_cpu_a.lst src\ucos_ii\port\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 57 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000032

Symbol: OSCtxSw
   Definitions
      At line 149 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 39 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000040

Symbol: OSIntCtxSw
   Definitions
      At line 167 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 40 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000030

Symbol: OSStartHang
   Definitions
      At line 137 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 138 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 118 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 38 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 0000004A

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 208 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 41 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 0000005E

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 221 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 211 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 99 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 37 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 94 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 36 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 48 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 131 in file src\ucos_ii\port\os_cpu_a.asm
      At line 151 in file src\ucos_ii\port\os_cpu_a.asm
      At line 168 in file src\ucos_ii\port\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 51 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 132 in file src\ucos_ii\port\os_cpu_a.asm
      At line 152 in file src\ucos_ii\port\os_cpu_a.asm
      At line 169 in file src\ucos_ii\port\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 50 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 121 in file src\ucos_ii\port\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 49 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 120 in file src\ucos_ii\port\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 31 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 27 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 227 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 28 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 228 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 26 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 127 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 29 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 216 in file src\ucos_ii\port\os_cpu_a.asm
      At line 232 in file src\ucos_ii\port\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 30 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 233 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 223 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSTaskSwHook used once
8 symbols
356 symbols in table
