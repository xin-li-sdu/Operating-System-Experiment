


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           Generic ARM 
                       Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.86
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;
   14 00000000         ; For       : ARMv7M Cortex-M3
   15 00000000         ; Mode      : Thumb2
   16 00000000         ; Toolchain : RealView Development Suite
   17 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   18 00000000         ;             ARM Developer Suite (ADS)
   19 00000000         ;             Keil uVision
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         ;                                           PUBLIC FUNCT
                       IONS
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         
   26 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   27 00000000                 EXTERN           OSPrioCur
   28 00000000                 EXTERN           OSPrioHighRdy
   29 00000000                 EXTERN           OSTCBCur
   30 00000000                 EXTERN           OSTCBHighRdy
   31 00000000                 EXTERN           OSIntNesting
   32 00000000                 EXTERN           OSIntExit
   33 00000000                 EXTERN           OSTaskSwHook
   34 00000000         
   35 00000000         
   36 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   37 00000000                 EXPORT           OS_CPU_SR_Restore
   38 00000000                 EXPORT           OSStartHighRdy
   39 00000000                 EXPORT           OSCtxSw
   40 00000000                 EXPORT           OSIntCtxSw
   41 00000000                 EXPORT           OS_CPU_PendSVHandler
   42 00000000                 EXPORT           OSStartHighRdy_super
   43 00000000         ; EXPORT  OSCtxSw_super
   44 00000000         
   45 00000000         
   46 00000000         ;*******************************************************



ARM Macro Assembler    Page 2 


                       *************************************************
   47 00000000         ;                                                EQUATES
                       
   48 00000000         ;*******************************************************
                       *************************************************
   49 00000000         
   50 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   51 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   52 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   53 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   54 00000000         
   55 00000000         ;*******************************************************
                       *************************************************
   56 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   57 00000000         ;*******************************************************
                       *************************************************
   58 00000000         
   59 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   60 00000000                 THUMB
   61 00000000                 REQUIRE8
   62 00000000                 PRESERVE8
   63 00000000         
   64 00000000         ;*******************************************************
                       *************************************************
   65 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   66 00000000         ;
   67 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   68 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   69 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   70 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   71 00000000         ;              into the CPU's status register.
   72 00000000         ;
   73 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   74 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   75 00000000         ;
   76 00000000         ;
   77 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:



ARM Macro Assembler    Page 3 


   78 00000000         ;
   79 00000000         ;                 void Task (void *p_arg)
   80 00000000         ;                 {
   81 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   82 00000000         ;                     OS_CPU_SR  cpu_sr;
   83 00000000         ;                 #endif
   84 00000000         ;
   85 00000000         ;                          :
   86 00000000         ;                          :
   87 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   88 00000000         ;                          :
   89 00000000         ;                          :
   90 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   91 00000000         ;                          :
   92 00000000         ;                          :
   93 00000000         ;                 }
   94 00000000         ;*******************************************************
                       *************************************************
   95 00000000         
   96 00000000         OS_CPU_SR_Save
   97 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   98 00000004 B672            CPSID            I
   99 00000006 4770            BX               LR
  100 00000008         
  101 00000008         OS_CPU_SR_Restore
  102 00000008 F380 8810       MSR              PRIMASK, R0
  103 0000000C 4770            BX               LR
  104 0000000E         
  105 0000000E         ;*******************************************************
                       *************************************************
  106 0000000E         ;                                          START MULTITA
                       SKING
  107 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  108 0000000E         ;
  109 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  110 0000000E         ;              the first task to start.
  111 0000000E         ;
  112 0000000E         ;           2) OSStartHighRdy() MUST:
  113 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  114 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  115 0000000E         ;              c) Set OSRunning to TRUE;
  116 0000000E         ;              d) Trigger PendSV exception;
  117 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  118 0000000E         ;*******************************************************
                       *************************************************
  119 0000000E         
  120 0000000E         OSStartHighRdy
  121 0000000E DF03            SWI              0x03
  122 00000010 4770            BX               LR



ARM Macro Assembler    Page 4 


  123 00000012         OSStartHighRdy_super
  124 00000012 B672            CPSID            I
  125 00000014 481E            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  126 00000016 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  127 0000001A 7001            STRB             R1, [R0]
  128 0000001C         
  129 0000001C 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  130 0000001E F380 8809       MSR              PSP, R0
  131 00000022         
  132 00000022 481C            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  133 00000024 2101            MOVS             R1, #1
  134 00000026 7001            STRB             R1, [R0]
  135 00000028         
  136 00000028 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  137 0000002A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  138 0000002E 6001            STR              R1, [R0]
  139 00000030 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  140 00000032 4770            BX               LR
  141 00000034         
  142 00000034         OSStartHang
  143 00000034 E7FE            B                OSStartHang ; Should never get 
                                                            here
  144 00000036         
  145 00000036         
  146 00000036         ;*******************************************************
                       *************************************************
  147 00000036         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  148 00000036         ;                                           void OSCtxSw
                       (void)
  149 00000036         ;
  150 00000036         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  151 00000036         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  152 00000036         ;*******************************************************
                       *************************************************
  153 00000036         
  154 00000036         OSCtxSw
  155 00000036         ; SWI 0x02
  156 00000036         ; BX  LR
  157 00000036         ;OSCtxSw_super
  158 00000036 B672            CPSID            I
  159 00000038 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  160 0000003A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  161 0000003E 6001            STR              R1, [R0]



ARM Macro Assembler    Page 5 


  162 00000040 B662            CPSIE            I
  163 00000042 4770            BX               LR
  164 00000044         
  165 00000044         
  166 00000044         ;*******************************************************
                       *************************************************
  167 00000044         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  168 00000044         ;                                         void OSIntCtxS
                       w(void)
  169 00000044         ;
  170 00000044         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  171 00000044         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  172 00000044         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  173 00000044         ;*******************************************************
                       *************************************************
  174 00000044         
  175 00000044         OSIntCtxSw
  176 00000044 4814            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  177 00000046 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  178 0000004A 6001            STR              R1, [R0]
  179 0000004C 4770            BX               LR
  180 0000004E         
  181 0000004E         ;*******************************************************
                       *************************************************
  182 0000004E         ;                                         HANDLE PendSV 
                       EXCEPTION
  183 0000004E         ;                                     void OS_CPU_PendSV
                       Handler(void)
  184 0000004E         ;
  185 0000004E         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  186 0000004E         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  187 0000004E         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  188 0000004E         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  189 0000004E         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  190 0000004E         ;              a thread or occurs due to an interrupt or
                        exception.
  191 0000004E         ;
  192 0000004E         ;           2) Pseudo-code is:
  193 0000004E         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  194 0000004E         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  195 0000004E         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  196 0000004E         ;              d) Call OSTaskSwHook();
  197 0000004E         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;



ARM Macro Assembler    Page 6 


  198 0000004E         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  199 0000004E         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  200 0000004E         ;              h) Restore R4-R11 from new process stack;
                       
  201 0000004E         ;              i) Perform exception return which will re
                       store remaining context.
  202 0000004E         ;
  203 0000004E         ;           3) On entry into PendSV handler:
  204 0000004E         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  205 0000004E         ;                 xPSR, PC, LR, R12, R0-R3
  206 0000004E         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  207 0000004E         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  208 0000004E         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  209 0000004E         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  210 0000004E         ;
  211 0000004E         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  212 0000004E         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  213 0000004E         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  214 0000004E         ;*******************************************************
                       *************************************************
  215 0000004E         
  216 0000004E         OS_CPU_PendSVHandler
  217 0000004E B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  218 00000050 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  219 00000054 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  220 00000056         
  221 00000056 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  222 00000058 E880 0FF0       STM              R0, {R4-R11}
  223 0000005C         
  224 0000005C 490F            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  225 0000005E 6809            LDR              R1, [R1]
  226 00000060 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  227 00000062         
  228 00000062         ; At this point, entire context of process has been save
                       d
  229 00000062         OS_CPU_PendSVHandler_nosave
  230 00000062 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value



ARM Macro Assembler    Page 7 


  231 00000064 480E            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  232 00000066 4780            BLX              R0
  233 00000068 F85D EB04       POP              {R14}
  234 0000006C         
  235 0000006C 480D            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  236 0000006E 490E            LDR              R1, =OSPrioHighRdy
  237 00000070 780A            LDRB             R2, [R1]
  238 00000072 7002            STRB             R2, [R0]
  239 00000074         
  240 00000074 4809            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  241 00000076 490D            LDR              R1, =OSTCBHighRdy
  242 00000078 680A            LDR              R2, [R1]
  243 0000007A 6002            STR              R2, [R0]
  244 0000007C         
  245 0000007C 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  246 0000007E E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  247 00000082 3020            ADDS             R0, R0, #0x20
  248 00000084 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  249 00000088 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  250 0000008C B662            CPSIE            I
  251 0000008E 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context 
  252 00000090                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\output\os_cpu_a.d -o.\output\os_cpu_a.o -IF:\keli5\ARM\RV31\INC 
-IF:\keli5\ARM\CMSIS\Include -IF:\keli5\ARM\INC\ST\STM32F10x --predefine="__EVA
L SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 5
36" --list=.\list\os_cpu_a.lst src\ucos_ii\port\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 59 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000036

Symbol: OSCtxSw
   Definitions
      At line 154 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 39 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000044

Symbol: OSIntCtxSw
   Definitions
      At line 175 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 40 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000034

Symbol: OSStartHang
   Definitions
      At line 142 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 143 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 120 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 38 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSStartHighRdy used once
OSStartHighRdy_super 00000012

Symbol: OSStartHighRdy_super
   Definitions
      At line 123 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 42 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSStartHighRdy_super used once
OS_CPU_PendSVHandler 0000004E

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 216 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 41 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 00000062

Symbol: OS_CPU_PendSVHandler_nosave



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 229 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 219 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 101 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 37 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 96 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 36 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 50 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 136 in file src\ucos_ii\port\os_cpu_a.asm
      At line 159 in file src\ucos_ii\port\os_cpu_a.asm
      At line 176 in file src\ucos_ii\port\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 53 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 137 in file src\ucos_ii\port\os_cpu_a.asm
      At line 160 in file src\ucos_ii\port\os_cpu_a.asm
      At line 177 in file src\ucos_ii\port\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 52 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 126 in file src\ucos_ii\port\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 51 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 125 in file src\ucos_ii\port\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 31 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 27 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 235 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 28 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 236 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 26 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 132 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 29 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 224 in file src\ucos_ii\port\os_cpu_a.asm
      At line 240 in file src\ucos_ii\port\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 30 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 241 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file src\ucos_ii\port\os_cpu_a.asm
   Uses
      At line 231 in file src\ucos_ii\port\os_cpu_a.asm
Comment: OSTaskSwHook used once
8 symbols
357 symbols in table
